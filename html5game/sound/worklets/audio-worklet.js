AudioWorkletProcessor.prototype._x=function(){this._y=true;this.port.onmessage=(_z)=>{if(_z.data==="kill")this._y=false;};};class _A extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._x();}process(_B,_C,parameters){const input=_B[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _D=input[c];for(let _E=0;_E<_D.length;++_E){const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];
_C[_F][c][_E]=_D[_E];}}return this._y;}}class _G extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._x();}process(_B,_C,parameters){const _H=_B[0];const _I=_B[1];const output=_C[0];const gain=parameters.gain;for(let c=0;c<_I.length;++c){const _D=_I[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E)_J[_E]=_D[_E];}for(let c=0;c<_H.length;++c){const _D=_H[c];const _J=output[c];for(let _E=0;_E<_D.length;
++_E){const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];_J[_E]+=_D[_E]*_K;}}return this._y;}}registerProcessor("audio-bus-input",_A);registerProcessor("audio-bus-output",_G);class _L extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _M=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._P=new Float32Array(_O);this._Q=new Uint32Array(_O);}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){_J[_E]=_D[_E];if(this._Q[c]===0)this._P[c]=_D[_E];const _R=(factor[_E]!==undefined)?factor[_E]:factor[0];++this._Q[c];this._Q[c]%=_R;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0.0){continue;}let _S=this._P[c];const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];_S*=_K;_S=Math.max(Math.min(_S,1.0),-1.0);const _T=(resolution[_E]!==undefined)?resolution[_E]:resolution[0];
const max=(_S>0.0)?_L._M[_T]-1:_L._M[_T];_S=Math.round(_S*max)/max;const _U=(mix[_E]!==undefined)?mix[_E]:mix[0];_J[_E]*=(1.0-_U);_J[_E]+=(_S*_U);}}return this._y;}}registerProcessor("bitcrusher-processor",_L);class _V{constructor(_W=1e-3){this.setTime(_W);}setTime(_W){this._X=Math.exp(-1/(_W*sampleRate));}process(_Y,_Z){return _Y+this._X*(_Z-_Y);}}class __{constructor(_01,_11){this._21=new _V(_01);this._31=new _V(_11);this._41=_01;this._51=_11;}_61(_W){if(_W===this._41)return;this._21.setTime(_W);this._41=_W;
}_71(_W){if(_W===this._51)return;this._31.setTime(_W);this._51=_W;}process(_Y,_Z){if(_Y>_Z)return this._21.process(_Y,_Z);else return this._31.process(_Y,_Z);}}class _81 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",
defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_91){super();this._x();const _21=_81.parameterDescriptors.find(_a1=>_a1.name==="attack");const _31=_81.parameterDescriptors.find(_a1=>_a1.name==="release");this._b1=new __(_21.defaultValue,_31.defaultValue);this._c1=0;}process(_d1,
_e1,_f1){const input=_d1[0];const output=_e1[0];const bypass=_f1.bypass;const ingain=_f1.ingain;const outgain=_f1.outgain;const threshold=_f1.threshold;const ratio=_f1.ratio;const attack=_f1.attack;const release=_f1.release;if(input.length===0)return this._y;for(let _E=0;_E<input[0].length;++_E){let frame=input.map(_g1=>_g1[_E]);output.forEach((_g1,_h1)=>{_g1[_E]=frame[_h1];});const _i1=(ingain[_E]!==undefined)?ingain[_E]:ingain[0];frame=frame.map(_j1=>_j1*=_i1);const rect=frame.map(_j1=>Math.abs(_j1));const max=Math.max(...rect);
const _k1=_l1(max);const _m1=(threshold[_E]!==undefined)?threshold[_E]:threshold[0];const _n1=_l1(_m1);const _o1=Math.max(0,_k1-_n1);const _21=(attack[_E]!==undefined)?attack[_E]:attack[0];const _31=(release[_E]!==undefined)?release[_E]:release[0];this._b1._61(_21);this._b1._71(_31);this._c1=this._b1.process(_o1,this._c1);const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0)continue;const _T=(ratio[_E]!==undefined)?ratio[_E]:ratio[0];const _p1=(this._c1/_T)-this._c1;const _K=_q1(_p1);frame=frame.map(_j1=>_j1*=_K);
const _r1=(outgain[_E]!==undefined)?outgain[_E]:outgain[0];frame=frame.map(_j1=>_j1*=_r1);output.forEach((_g1,_h1)=>{_g1[_E]=frame[_h1];});}return this._y;}}function _l1(_s1){return 20*Math.log10(_s1);}function _q1(_s1){return Math.pow(10,_s1/20);}registerProcessor("compressor-processor",_81);class _t1 extends AudioWorkletProcessor{static _u1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,
minValue:0.0,maxValue:_t1._u1},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];const _v1=(_t1._u1*sampleRate)+1;this.buffer=new Array(_O);this._w1=new Uint32Array(_O);for(let c=0;c<_O;++c)this.buffer[c]=new Float32Array(_v1);}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const time=parameters.time;
const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){_J[_E]=_D[_E];const _m1=(time[_E]!==undefined)?time[_E]:time[0];const _x1=this._y1(c,_m1);const _R=(feedback[_E]!==undefined)?feedback[_E]:feedback[0];const _z1=_D[_E]+(_x1*_R);this.write(c,_z1);const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0.0){continue;}const _U=(mix[_E]!==undefined)?mix[_E]:mix[0];_J[_E]*=(1-_U);_J[_E]+=(_x1*_U);}}
return this._y;}_y1(_A1,_W){const _B1=_W*sampleRate;let _C1=(this._w1[_A1]-~~_B1);let _D1=(_C1-1);while(_C1<0)_C1+=this.buffer[_A1].length;while(_D1<0)_D1+=this.buffer[_A1].length;const frac=_B1-~~_B1;const _E1=this.buffer[_A1][_C1];const _F1=this.buffer[_A1][_D1];return _E1+(_F1-_E1)*frac;}write(_A1,_G1){++this._w1[_A1];this._w1[_A1]%=this.buffer[_A1].length;this.buffer[_A1][this._w1[_A1]]=_G1;}}registerProcessor("delay-processor",_t1);class _H1 extends AudioWorkletProcessor{static get parameterDescriptors(){
return [];}constructor(){super();this._x();}process(_I1,_J1,_K1){const input=_I1[0];const _L1=_J1[0];const _M1=_J1[1];for(let c=0;c<input.length;++c){const _D=input[c];const _N1=_L1[c];const _O1=_M1[c];for(let _E=0;_E<_D.length;++_E){_N1[_E]=_D[_E];_O1[_E]=_D[_E];}}return this._y;}}class _P1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._x();}process(_I1,_J1,_K1){const _H=_I1[0];const _I=_I1[1];
const output=_J1[0];const bypass=_K1.bypass;for(let c=0;c<_I.length;++c){const _Q1=_H[c];const _R1=_I[c];const _J=output[c];for(let _E=0;_E<_Q1.length;++_E){const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0){_J[_E]=_R1[_E];}else {_J[_E]=_Q1[_E];}}}return this._y;}}registerProcessor("eq-input",_H1);registerProcessor("eq-output",_P1);class _S1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",
automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._x();}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){_J[_E]=_D[_E];const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0.0){continue;}const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];_J[_E]*=_K;}}return this._y;}}registerProcessor("gain-processor",
_S1);class _T1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];
this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=0;this.__1=new Float32Array(_O);this._02=new Float32Array(_O);this._12=new Float32Array(_O);this._22=new Float32Array(_O);this._32=-1;this._42=-1;this._52=-1;}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _62=(freq.length===1&&q.length===1&&gain.length===1);if(_62)this._72(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _D=input[c];
const _J=output[c];for(let _E=0;_E<_D.length;++_E){if(_62===false){const _R=(freq[_E]!==undefined)?freq[_E]:freq[0];const _82=(q[_E]!==undefined)?q[_E]:q[0];const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];this._72(_R,_82,_K);}const _92=this._X1*_D[_E]+this._Y1*this.__1[c]+this._Z1*this._02[c]-this._V1*this._12[c]-this._W1*this._22[c];this._02[c]=this.__1[c];this.__1[c]=_D[_E];this._22[c]=this._12[c];this._12[c]=_92;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];_J[_E]=(_F>0)?_D[_E]:_92;}}return this._y;
}_72(_a2,_b2,_c2){if(_a2===this._32&&_b2===this._42&&_c2===this._52)return;const _d2=2*Math.PI*_a2/sampleRate;const _e2=Math.cos(_d2);const _f2=Math.sqrt(_c2);const _g2=_f2+1;const _h2=_f2-1;const _i2=_g2*_e2;const _j2=_h2*_e2;const _k2=_g2-_j2;const _l2=_g2+_j2;const alpha=Math.sin(_d2)/(2*_b2);const _m2=(2*Math.sqrt(_f2)*alpha);const _n2=_k2+_m2;const _V1=2*(_h2-_i2);const _W1=_k2-_m2;const _X1=_f2*(_l2+_m2);const _Y1=-2*_f2*(_h2+_i2);const _Z1=_f2*(_l2-_m2);this._V1=_V1/_n2;this._W1=_W1/_n2;this._X1=_X1/_n2;this._Y1=_Y1/_n2;
this._Z1=_Z1/_n2;this._32=_a2;this._42=_b2;this._52=_c2;}}registerProcessor("hi-shelf-processor",_T1);class _o2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p2=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_p2),minValue:10.0,maxValue:_p2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_N){super();
this._x();const _O=_N.outputChannelCount[0];this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=0;this.__1=new Float32Array(_O);this._02=new Float32Array(_O);this._12=new Float32Array(_O);this._22=new Float32Array(_O);this._q2=-1;this._42=-1;}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _62=(cutoff.length===1&&q.length===1);if(_62)this._72(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _D=input[c];
const _J=output[c];for(let _E=0;_E<_D.length;++_E){if(_62===false){const c=(cutoff[_E]!==undefined)?cutoff[_E]:cutoff[0];const _82=(q[_E]!==undefined)?q[_E]:q[0];this._72(c,_82);}const _92=this._X1*_D[_E]+this._Y1*this.__1[c]+this._Z1*this._02[c]-this._V1*this._12[c]-this._W1*this._22[c];this._02[c]=this.__1[c];this.__1[c]=_D[_E];this._22[c]=this._12[c];this._12[c]=_92;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];_J[_E]=(_F>0)?_D[_E]:_92;}}return this._y;}_72(_r2,_b2){if(_r2===this._q2&&_b2===this._42)return;
const _d2=2*Math.PI*_r2/sampleRate;const alpha=Math.sin(_d2)/(2*_b2);const _e2=Math.cos(_d2);const _n2=1+alpha;const _V1=-2*_e2;const _W1=1-alpha;const _X1=(1+_e2)/2;const _Y1=-1-_e2;const _Z1=(1+_e2)/2;this._V1=_V1/_n2;this._W1=_W1/_n2;this._X1=_X1/_n2;this._Y1=_Y1/_n2;this._Z1=_Z1/_n2;this._q2=_r2;this._42=_b2;}}registerProcessor("hpf2-processor",_o2);class _s2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=0;this.__1=new Float32Array(_O);this._02=new Float32Array(_O);this._12=new Float32Array(_O);this._22=new Float32Array(_O);
this._32=-1;this._42=-1;this._52=-1;}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _62=(freq.length===1&&q.length===1&&gain.length===1);if(_62)this._72(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){if(_62===false){const _R=(freq[_E]!==undefined)?freq[_E]:freq[0];const _82=(q[_E]!==undefined)?q[_E]:q[0];const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];
this._72(_R,_82,_K);}const _92=this._X1*_D[_E]+this._Y1*this.__1[c]+this._Z1*this._02[c]-this._V1*this._12[c]-this._W1*this._22[c];this._02[c]=this.__1[c];this.__1[c]=_D[_E];this._22[c]=this._12[c];this._12[c]=_92;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];_J[_E]=(_F>0)?_D[_E]:_92;}}return this._y;}_72(_a2,_b2,_c2){if(_a2===this._32&&_b2===this._42&&_c2===this._52)return;const _d2=2*Math.PI*_a2/sampleRate;const _e2=Math.cos(_d2);const _f2=Math.sqrt(_c2);const _g2=_f2+1;const _h2=_f2-1;const _i2=_g2*_e2;
const _j2=_h2*_e2;const _k2=_g2-_j2;const _l2=_g2+_j2;const alpha=Math.sin(_d2)/(2*_b2);const _m2=(2*Math.sqrt(_f2)*alpha);const _n2=_l2+_m2;const _V1=-2*(_h2+_i2);const _W1=_l2-_m2;const _X1=_f2*(_k2+_m2);const _Y1=2*_f2*(_h2-_i2);const _Z1=_f2*(_k2-_m2);this._V1=_V1/_n2;this._W1=_W1/_n2;this._X1=_X1/_n2;this._Y1=_Y1/_n2;this._Z1=_Z1/_n2;this._32=_a2;this._42=_b2;this._52=_c2;}}registerProcessor("lo-shelf-processor",_s2);class _t2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _p2=Math.min(sampleRate/2.0,
20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_p2),minValue:10.0,maxValue:_p2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=0;this.__1=new Float32Array(_O);this._02=new Float32Array(_O);this._12=new Float32Array(_O);this._22=new Float32Array(_O);
this._q2=-1;this._42=-1;}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _62=(cutoff.length===1&&q.length===1);if(_62)this._72(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){if(_62===false){const c=(cutoff[_E]!==undefined)?cutoff[_E]:cutoff[0];const _82=(q[_E]!==undefined)?q[_E]:q[0];this._72(c,_82);}const _92=this._X1*_D[_E]+this._Y1*this.__1[c]+this._Z1*this._02[c]-this._V1*this._12[c]-this._W1*this._22[c];
this._02[c]=this.__1[c];this.__1[c]=_D[_E];this._22[c]=this._12[c];this._12[c]=_92;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];_J[_E]=(_F>0)?_D[_E]:_92;}}return this._y;}_72(_r2,_b2){if(_r2===this._q2&&_b2===this._42)return;const _d2=2*Math.PI*_r2/sampleRate;const alpha=Math.sin(_d2)/(2*_b2);const _e2=Math.cos(_d2);const _n2=1+alpha;const _V1=-2*_e2;const _W1=1-alpha;const _X1=(1-_e2)/2;const _Y1=1-_e2;const _Z1=(1-_e2)/2;this._V1=_V1/_n2;this._W1=_W1/_n2;this._X1=_X1/_n2;this._Y1=_Y1/_n2;this._Z1=_Z1/_n2;
this._q2=_r2;this._42=_b2;}}registerProcessor("lpf2-processor",_t2);class _u2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _U1=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_U1),minValue:10.0,maxValue:_U1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}
];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._V1=0;this._W1=0;this._X1=0;this._Y1=0;this._Z1=0;this.__1=new Float32Array(_O);this._02=new Float32Array(_O);this._12=new Float32Array(_O);this._22=new Float32Array(_O);this._32=-1;this._42=-1;this._52=-1;}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _62=(freq.length===1&&q.length===1&&gain.length===1);if(_62)this._72(freq[0],
q[0],gain[0]);for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];for(let _E=0;_E<_D.length;++_E){if(_62===false){const _R=(freq[_E]!==undefined)?freq[_E]:freq[0];const _82=(q[_E]!==undefined)?q[_E]:q[0];const _K=(gain[_E]!==undefined)?gain[_E]:gain[0];this._72(_R,_82,_K);}const _92=this._X1*_D[_E]+this._Y1*this.__1[c]+this._Z1*this._02[c]-this._V1*this._12[c]-this._W1*this._22[c];this._02[c]=this.__1[c];this.__1[c]=_D[_E];this._22[c]=this._12[c];this._12[c]=_92;const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];
_J[_E]=(_F>0)?_D[_E]:_92;}}return this._y;}_72(_a2,_b2,_c2){if(_a2===this._32&&_b2===this._42&&_c2===this._52)return;const _d2=2*Math.PI*_a2/sampleRate;const _e2=Math.cos(_d2);const _f2=Math.sqrt(_c2);const alpha=Math.sin(_d2)/(2*_b2);const _v2=alpha/_f2;const _w2=alpha*_f2;const _n2=1+_v2;const _V1=-2*_e2;const _W1=1-_v2;const _X1=1+_w2;const _Y1=_V1;const _Z1=1-_w2;this._V1=_V1/_n2;this._W1=_W1/_n2;this._X1=_X1/_n2;this._Y1=_Y1/_n2;this._Z1=_Z1/_n2;this._32=_a2;this._42=_b2;this._52=_c2;}}registerProcessor("peak-eq-processor",
_u2);class _x2{constructor(_y2){this._z2=0;this._A2=0;this.feedback=0;this._B2=0;this.buffer=new Float32Array(_y2);this._C2=0;}process(_G1){const out=this.buffer[this._C2];this._B2=(this._B2*this._z2)+(out*this._A2);this.buffer[this._C2]=_G1+(this._B2*this.feedback);++this._C2;this._C2%=this.buffer.length;return out;}_D2(_E2){this.feedback=Math.min(Math.max(0,_E2),1);}_F2(_G2){this._z2=Math.min(Math.max(0,_G2),1);this._A2=1-this._z2;}}class _H2{constructor(_y2){this.feedback=0;this.buffer=new Float32Array(_y2);
this._C2=0;}process(_G1){const out=this.buffer[this._C2];this.buffer[this._C2]=_G1+(out*this.feedback);++this._C2;this._C2%=this.buffer.length;return(out-_G1);}_D2(_E2){this.feedback=Math.min(Math.max(0,_E2),1);}}class _I2 extends AudioWorkletProcessor{static _J2=8;static _K2=4;static _L2=0.015;static _M2=0.4;static _N2=0.28;static _O2=0.7;static _P2=[1116,1188,1277,1356,1422,1491,1557,1617];static _Q2=[1139,1211,1300,1379,1445,1514,1580,1640];static _R2=[556,441,341,225];static _S2=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._T2=-1;this._U2=-1;this._V2=new Array(_O);this._W2=new Array(_O);const _X2=[_I2._P2,_I2._Q2];const _Y2=[_I2._R2,
_I2._S2];for(let c=0;c<_O;++c){this._V2[c]=new Array(_I2._J2);this._W2[c]=new Array(_I2._K2);for(let i=0;i<_I2._J2;++i)this._V2[c][i]=new _x2(_X2[c%_X2.length][i]);for(let i=0;i<_I2._K2;++i)this._W2[c][i]=new _H2(_Y2[c%_Y2.length][i]);}this._Z2(0.5);this._F2(0.5);for(let c=0;c<_O;++c)for(let i=0;i<_I2._K2;++i)this._W2[c][i]._D2(0.5);}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;
c<input.length;++c){const _D=input[c];const _J=output[c];for(let __2=0;__2<_D.length;++__2){const _E=(size[__2]!==undefined)?size[__2]:size[0];const _03=(damp[__2]!==undefined)?damp[__2]:damp[0];this._Z2(_E);this._F2(_03);_J[__2]=_D[__2];let out=0;const _S=_D[__2]*_I2._L2;for(let i=0;i<_I2._J2;++i)out+=this._V2[c][i].process(_S);for(let i=0;i<_I2._K2;++i)out=this._W2[c][i].process(out);const _F=(bypass[__2]!==undefined)?bypass[__2]:bypass[0];if(_F>0.0){continue;}const _U=(mix[__2]!==undefined)?mix[__2]:mix[0];
_J[__2]*=(1-_U);_J[__2]+=(out*_U);}}return this._y;}_Z2(_y2){if(_y2===this._T2)return;const size=(_y2*_I2._N2)+_I2._O2;for(let c=0;c<this._V2.length;++c)for(let i=0;i<_I2._J2;++i)this._V2[c][i]._D2(size);this._T2=_y2;}_F2(_G2){if(_G2===this._U2)return;const damp=_G2*_I2._M2;for(let c=0;c<this._V2.length;++c)for(let i=0;i<_I2._J2;++i)this._V2[c][i]._F2(damp);this._U2=_G2;}}registerProcessor("reverb1-processor",_I2);class _13 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_N){super();this._x();const _O=_N.outputChannelCount[0];this._23=new Array(_O).fill(1.0);this._33=new Array(_O).fill(0.0);
this._43=new Array(_O).fill(_53._63._73);this._83=new Array(_O);for(let c=0;c<_O;++c){this._83[c]=new _93();this._83[c]._a3(sampleRate);this._83[c]._b3(this._23[c]);this._83[c]._c3(this._43[c]);if(c%2===1){this._83[c]._d3(this._33[c]);}}}process(_B,_C,parameters){const input=_B[0];const output=_C[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _D=input[c];const _J=output[c];
for(let _E=0;_E<_D.length;++_E){_J[_E]=_D[_E];const _T=(rate[_E]!==undefined)?rate[_E]:rate[0];const _e3=(offset[_E]!==undefined)?offset[_E]:offset[0];const _f3=(shape[_E]!==undefined)?shape[_E]:shape[0];this._g3(c,_T,_e3,_f3);const _h3=this._83[c]._y1();const _F=(bypass[_E]!==undefined)?bypass[_E]:bypass[0];if(_F>0.0){continue;}const i=(intensity[_E]!==undefined)?intensity[_E]:intensity[0];const out=_D[_E]*_h3*i;_J[_E]*=(1.0-i);_J[_E]+=out;}}return this._y;}_g3(_A1,_i3,_j3,_k3){if(_i3!==this._23[_A1]){this._83[_A1]._b3(_i3);
this._23[_A1]=_i3;}if(_j3!==this._33[_A1]){if(_A1%2===1){this._83[_A1]._d3(_j3);}this._33[_A1]=_j3;}if(_k3!==this._43[_A1]){this._83[_A1]._c3(_k3);this._43[_A1]=_k3;}}}registerProcessor("tremolo-processor",_13);function _53(){}_53._63={_73:0,_l3:1,_m3:2,_n3:3,_o3:4,_p3:5};_53._q3=function(_r3){return 1.0-_r3;};_53._s3=function(_r3){return _r3;};_53._t3=function(_r3){return 0.5*(Math.sin((_r3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_53._u3=function(_r3){if(_r3<0.5){return 0.0;}return 1.0;};_53._v3=function(_r3){
if(_r3<0.5){return 2.0*_r3;}return 2.0-(2.0*_r3);};_53._w3=[_53._q3,_53._s3,_53._t3,_53._u3,_53._v3];_x3._y3=512;_x3._z3=1.0/_x3._y3;function _x3(_A3){this.data=new Float32Array(_x3._y3);for(let i=0;i<_x3._y3;++i){this.data[i]=_A3(i*_x3._z3);}}_x3.prototype._y1=function(_r3){_r3=Math.max(0.0,_r3);_r3=Math.min(_r3,1.0);const _B3=_r3*_x3._y3;const _C3=~~_B3;const _D3=_B3-_C3;let _C1=_C3;let _D1=_C1+1;if(_C1>=_x3._y3){_C1-=_x3._y3;}if(_D1>=_x3._y3){_D1-=_x3._y3;}const _E1=this.data[_C1];const _F1=this.data[_D1];
return _E1+(_F1-_E1)*_D3;};_93._E3=[];_93._F3=false;_93._G3=0.0;_93._U1=20.0;function _93(){this._H3=48000;this.shape=_53._63._m3;this.freq=1.0;this._I3=0.0;this._z3=0.0;this._J3=0.0;if(_93._F3==true){return;}for(let i=0;i<_53._63._p3;++i){_93._E3[i]=new _x3(_53._w3[i]);}_93._F3=true;}_93._K3=function(){return(_93._F3==true);};_93.prototype._a3=function(_L3){this._H3=_L3;this._M3();};_93.prototype._b3=function(_a2){_a2=Math.max(_93._G3,_a2);_a2=Math.min(_a2,_93._U1);this.freq=_a2;this._M3();};_93.prototype._d3=function(_j3){
_j3=Math.max(0.0,_j3);_j3=Math.min(_j3,1.0);const _N3=_j3-this._J3;this._J3=_j3;this._I3+=_N3;while(this._I3>=1.0){this._I3-=1.0;}while(this._I3<0.0){this._I3+=1.0;}};_93.prototype._c3=function(_k3){_k3=Math.max(0,_k3);_k3=Math.min(_k3,_53._63._p3-1);this.shape=_k3;};_93.prototype._y1=function(){const result=_93._E3[this.shape]._y1(this._I3);this._I3+=this._z3;while(this._I3>=1.0){this._I3-=1.0;}return result;};_93.prototype._M3=function(){this._z3=this.freq/this._H3;};